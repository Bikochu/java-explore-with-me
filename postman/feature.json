{
	"info": {
		"_postman_id": "2407c4c1-b2c0-4bdc-9761-19981f7c4925",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25692803"
	},
	"item": [
		{
			"name": "Add Like, User not exist.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка запроса.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status, '\"status\" должен быть').to.eql(404);\r",
							"    pm.expect(jsonData.error, '\"error\" должен быть').to.eql('Not Found');\r",
							"    pm.expect(jsonData.path, '\"path\" должен быть').to.eql('/users/999/rating/7');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId?likes=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"query": [
						{
							"key": "likes",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "999",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "7"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Like, Event not exist.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка запроса.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status, '\"status\" должен быть').to.eql(404);\r",
							"    pm.expect(jsonData.error, '\"error\" должен быть').to.eql('Not Found');\r",
							"    pm.expect(jsonData.path, '\"path\" должен быть').to.eql('/users/16/rating/999');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId?likes=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"query": [
						{
							"key": "likes",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "16",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "999"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Like, User wasn't be on Event.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка запроса.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status, '\"status\" должен быть').to.eql(404);\r",
							"    pm.expect(jsonData.error, '\"error\" должен быть').to.eql('Not Found');\r",
							"    pm.expect(jsonData.path, '\"path\" должен быть').to.eql('/users/16/rating/5');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId?likes=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"query": [
						{
							"key": "likes",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "16",
							"description": "id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Like, User Request status - PENDING.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка запроса.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status, '\"status\" должен быть').to.eql(409);\r",
							"    pm.expect(jsonData.error, '\"error\" должен быть').to.eql('Conflict');\r",
							"    pm.expect(jsonData.path, '\"path\" должен быть').to.eql('/users/102/rating/85');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId?likes=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"query": [
						{
							"key": "likes",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "102",
							"description": "id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "85",
							"description": "id текущего эвента"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Like, User is Iniciator.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка запроса.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status, '\"status\" должен быть').to.eql(409);\r",
							"    pm.expect(jsonData.error, '\"error\" должен быть').to.eql('Conflict');\r",
							"    pm.expect(jsonData.path, '\"path\" должен быть').to.eql('/users/12/rating/5');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId?likes=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"query": [
						{
							"key": "likes",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "12",
							"description": "id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "5",
							"description": "id текущего эвента"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Like, User 16 Event 7.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" должен быть').to.not.eql(null);\r",
							"    pm.expect(jsonData.likerId, '\"likerId\" должен быть').to.eql(16);\r",
							"    pm.expect(jsonData.eventId, '\"eventId\" должен быть').to.eql(7);\r",
							"    pm.expect(jsonData.likes, '\"likes\" должен быть').to.eql(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId?likes=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"query": [
						{
							"key": "likes",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "16",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "7"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Like Duplicate, User 16 Event 7.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка запроса.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status, '\"status\" должен быть').to.eql(409);\r",
							"    pm.expect(jsonData.error, '\"error\" должен быть').to.eql('Conflict');\r",
							"    pm.expect(jsonData.path, '\"path\" должен быть').to.eql('/users/16/rating/7');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId?likes=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"query": [
						{
							"key": "likes",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "16",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "7"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Dislike, User 16 Event 7.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка запроса.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status, '\"status\" должен быть').to.eql(409);\r",
							"    pm.expect(jsonData.error, '\"error\" должен быть').to.eql('Conflict');\r",
							"    pm.expect(jsonData.path, '\"path\" должен быть').to.eql('/users/16/rating/7');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId?likes=false",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"query": [
						{
							"key": "likes",
							"value": "false"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "16",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "7"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Like to Dislike, User 16 Event 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" должен быть').to.not.eql(null);\r",
							"    pm.expect(jsonData.likerId, '\"likerId\" должен быть').to.eql(16);\r",
							"    pm.expect(jsonData.eventId, '\"eventId\" должен быть').to.eql(7);\r",
							"    pm.expect(jsonData.likes, '\"likes\" должен быть').to.eql(false);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId?likes=false",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"query": [
						{
							"key": "likes",
							"value": "false"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "16"
						},
						{
							"key": "eventId",
							"value": "7"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Like, User 13, Event 5.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" должен быть').to.not.eql(null);\r",
							"    pm.expect(jsonData.likerId, '\"likerId\" должен быть').to.eql(13);\r",
							"    pm.expect(jsonData.eventId, '\"eventId\" должен быть').to.eql(5);\r",
							"    pm.expect(jsonData.likes, '\"likes\" должен быть').to.eql(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId?likes=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"query": [
						{
							"key": "likes",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "13"
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Like to Dislike, User 13 Event 5.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" должен быть').to.not.eql(null);\r",
							"    pm.expect(jsonData.likerId, '\"likerId\" должен быть').to.eql(13);\r",
							"    pm.expect(jsonData.eventId, '\"eventId\" должен быть').to.eql(5);\r",
							"    pm.expect(jsonData.likes, '\"likes\" должен быть').to.eql(false);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId?likes=false",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"query": [
						{
							"key": "likes",
							"value": "false"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "13"
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Dislike to Like, User 13 Event 5.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" должен быть').to.not.eql(null);\r",
							"    pm.expect(jsonData.likerId, '\"likerId\" должен быть').to.eql(13);\r",
							"    pm.expect(jsonData.eventId, '\"eventId\" должен быть').to.eql(5);\r",
							"    pm.expect(jsonData.likes, '\"likes\" должен быть').to.eql(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId?likes=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"query": [
						{
							"key": "likes",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "13"
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Dislike to Like, User 999 Event 5.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка запроса.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status, '\"status\" должен быть').to.eql(404);\r",
							"    pm.expect(jsonData.error, '\"error\" должен быть').to.eql('Not Found');\r",
							"    pm.expect(jsonData.path, '\"path\" должен быть').to.eql('/users/999/rating/5');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId?likes=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"query": [
						{
							"key": "likes",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "999"
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Dislike to Like, User 13 Event 999.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка запроса.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status, '\"status\" должен быть').to.eql(404);\r",
							"    pm.expect(jsonData.error, '\"error\" должен быть').to.eql('Not Found');\r",
							"    pm.expect(jsonData.path, '\"path\" должен быть').to.eql('/users/13/rating/999');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId?likes=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"query": [
						{
							"key": "likes",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "13"
						},
						{
							"key": "eventId",
							"value": "999"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Events. RateSort: HIGH.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка 1ого элемента.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].id, '\"id\" 1ого Эвента').to.eql(5);\r",
							"    pm.expect(jsonData[0].rate, '\"rate\" 1ого Эвента').to.eql(10.0);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка 2ого элемента.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1].id, '\"id\" 2ого Эвента').to.eql(7);\r",
							"    pm.expect(jsonData[1].rate, '\"rate\" 2ого Эвента').to.eql(0.0);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка количества Эвентов.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.length(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseUrl}}/events/rating?rateSort=HIGH",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"rating"
					],
					"query": [
						{
							"key": "rateSort",
							"value": "HIGH"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Events. RateSort: LOW",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка 1ого элемента.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].id, '\"id\" 1ого Эвента').to.eql(7);\r",
							"    pm.expect(jsonData[0].rate, '\"rate\" 1ого Эвента').to.eql(0.0);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка 2ого элемента.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1].id, '\"id\" 2ого Эвента').to.eql(5);\r",
							"    pm.expect(jsonData[1].rate, '\"rate\" 2ого Эвента').to.eql(10.0);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка количества Эвентов.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.length(2);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseUrl}}/events/rating?rateSort=LOW",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"rating"
					],
					"query": [
						{
							"key": "rateSort",
							"value": "LOW"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Users. RateSort: HIGH.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка 1ого Пользователя\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].id, '\"id\" 1 User').to.eql(13);\r",
							"    pm.expect(jsonData[0].rate, '\"rate\" 1 User').to.eql(10.0);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка 2ого Пользователя\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1].id, '\"id\" 2 User').to.eql(16);\r",
							"    pm.expect(jsonData[1].rate, '\"rate\" 2 User').to.eql(0.0);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка количества Пользователей.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.length(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating?rateSort=HIGH",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating"
					],
					"query": [
						{
							"key": "rateSort",
							"value": "HIGH"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "16"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Users. RateSort: LOW",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка 1ого Пользователя\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].id, '\"id\" 1 User').to.eql(16);\r",
							"    pm.expect(jsonData[0].rate, '\"rate\" 1 User').to.eql(0.0);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка 2ого Пользователя\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1].id, '\"id\" 2 User').to.eql(13);\r",
							"    pm.expect(jsonData[1].rate, '\"rate\" 2 User').to.eql(10.0);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка количества Пользователей.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.length(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating?rateSort=LOW",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating"
					],
					"query": [
						{
							"key": "rateSort",
							"value": "LOW"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "16"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get rated Users. User not exist.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(409)\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка запроса.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status, '\"status\" должен быть').to.eql(409);\r",
							"    pm.expect(jsonData.error, '\"error\" должен быть').to.eql('Conflict');\r",
							"    pm.expect(jsonData.path, '\"path\" должен быть').to.eql('/users/999/rating');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating"
					],
					"query": [
						{
							"key": "rateSort",
							"value": "HIGH",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "999"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Like. User 13 Event 5.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "13"
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Like Duplicate. User 13 Event 5.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(404)\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка запроса.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status, '\"status\" должен быть').to.eql(404);\r",
							"    pm.expect(jsonData.error, '\"error\" должен быть').to.eql('Not Found');\r",
							"    pm.expect(jsonData.path, '\"path\" должен быть').to.eql('/users/13/rating/5');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "13"
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Events after Delete Rating. RateSort: HIGH.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка 1ого элемента.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].id, '\"id\" 1ого Эвента').to.eql(7);\r",
							"    pm.expect(jsonData[0].rate, '\"rate\" 1ого Эвента').to.eql(0.0);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка 1ого элемента.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1].id, '\"id\" 2ого Эвента').to.eql(5);\r",
							"    pm.expect(jsonData[1].rate, '\"rate\" 2ого Эвента').to.eql(0.0);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка количества Эвентов.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.length(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseUrl}}/events/rating?rateSort=HIGH",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"rating"
					],
					"query": [
						{
							"key": "rateSort",
							"value": "HIGH"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Users after Delete Rating. RateSort: HIGH.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка 1ого Пользователя\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].id, '\"id\" 1 User').to.eql(13);\r",
							"    pm.expect(jsonData[0].rate, '\"rate\" 1 User').to.eql(0.0);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка 2ого Пользователя\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1].id, '\"id\" 2 User').to.eql(16);\r",
							"    pm.expect(jsonData[1].rate, '\"rate\" 2 User').to.eql(0.0);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка количества Пользователей.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.length(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating?rateSort=HIGH",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating"
					],
					"query": [
						{
							"key": "rateSort",
							"value": "HIGH"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "16"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}